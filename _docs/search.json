[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "mono-dense-keras",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "mono-dense-keras",
    "section": "Install",
    "text": "Install\npip install mono_dense_keras"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "mono-dense-keras",
    "section": "How to use",
    "text": "How to use\n\nimport numpy as np\nfrom airt.keras.layers import MonotonicDense\n\nlayer = MonotonicDense(5)\n\nx = np.random.uniform(size=(3, 4))\ny = layer(x)\n\ny\n\n<tf.Tensor: shape=(3, 5), dtype=float32, numpy=\narray([[0.34622836, 0.227113  , 0.4796654 , 0.5881839 , 0.37919286],\n       [0.35180905, 0.84119815, 0.8074318 , 0.4692309 , 0.96391547],\n       [0.8394511 , 1.2473419 , 1.2556267 , 0.84408396, 1.139815  ]],\n      dtype=float32)>"
  },
  {
    "objectID": "keras.layers.html",
    "href": "keras.layers.html",
    "title": "Layers",
    "section": "",
    "text": "MonotonicDense\n\n MonotonicDense (*args, **kwargs)\n\nMonotonic counterpart of the regular Dense Layer of tf.Keras\nArgs: units: Positive integer, dimensionality of the output space. activation: Activation function to use. indicator_vector: Vector to indicate which of the inputs are monotonically increasing or monotonically decreasing or non-monotonic. Has value 1 for monotonically increasing and -1 for monotonically decreasing and 0 for non-monotonic variables. convexity_indicator: If the value is 0 or 1, then all elements of the activation selector will be 0 or 1, respectevely. If None, epsilon will be used to determine the number of 0 and 1 in the activation selector. epsilon: Percentage of elements with value 1 in the activation vector if convexity_indicator is None, ignored otherwise.\n\nrng = np.random.default_rng(42)\n\nx = rng.uniform(size=(3, 4))\n\nlayer = MonotonicDense(units=5)\ny = layer(x)\ny\n\n<tf.Tensor: shape=(3, 5), dtype=float32, numpy=\narray([[1.4663731 , 1.1916949 , 1.550106  , 1.3262967 , 1.0860083 ],\n       [1.3676884 , 0.830119  , 1.7987933 , 1.2374206 , 0.8645284 ],\n       [0.91069895, 0.5130359 , 1.1916037 , 0.7368036 , 0.86824244]],\n      dtype=float32)>"
  }
]